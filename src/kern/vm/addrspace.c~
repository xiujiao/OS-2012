/*
 * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
 *	The President and Fellows of Harvard College.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <types.h>
#include <kern/errno.h>
#include <lib.h>
#include <addrspace.h>
#include <vm.h>
#include <spl.h>
#include <spinlock.h>
#include <thread.h>
#include <current.h>
#include <mips/tlb.h>

struct addrspace *
as_create(void)
{
	struct addrspace *as;

	as = kmalloc(sizeof(struct addrspace));
	if (as == NULL) {
		return NULL;
	}
 
	//  Initialize as needed.
	as->heap_start = 0;
	as->heap_end = 0;
	as->page_table_addr = alloc_kpages (1);
	if((void *)as->page_table_addr == NULL){
		return NULL;
	}

	return as;
}

int
as_copy(struct addrspace *old, struct addrspace **ret)
{
	struct addrspace *newas;

	newas = as_create();
	if (newas==NULL) {
		return ENOMEM;
	}

	// create new second level page table and copy present pages
	vaddr_t* old_dir_one = (vaddr_t *)old->page_table_addr;
	vaddr_t* new_dir_one = (vaddr_t *)newas->page_table_addr;
	for(uint32_t index_one = 0; index_one < 1024; index_one++){
		//if there is second level page table,then to find present pages
		if(old_dir_one[index_one] != 0){
			new_dir_one[index_one] = alloc_kpages(1);
			if(new_dir_one[index_one] == 0){
				return ENOMEM;
			}
			vaddr_t* old_dir_two = (vaddr_t *)old_dir_one[index_one];
		   vaddr_t* new_dir_two = (vaddr_t *)new_dir_one[index_one];
			// travese the page table
			for(uint32_t index_two = 0; index_two < 1024; index_two++){
				// if page is present
				if(((old_dir_two[index_two] & PAGE_EXIST) != 0) &&
					  	((old_dir_two[index_two] & PAGE_NUMBER) != 0 )){
					// alloc a new page for new as
							vaddr_t va = ((index_one << 22) & PAGE_DIR_VA_HL) + 
						          ((index_two << 12) & PAGE_DIR_VA_M); 
					paddr_t paddr = page_allo(newas,va);
					if(paddr == 0){
						return ENOMEM;
					}
					//update new page table and copy permissiom bits
					new_dir_two[index_two] = (paddr & PAGE_NUMBER) |
					  							 	(old_dir_two[index_two] & PAGE_PERMIT);
					KASSERT((paddr & PAGE_NUMBER) == paddr);
					memmove((void *)PADDR_TO_KVADDR(paddr),
								(const void *)PADDR_TO_KVADDR(old_dir_two[index_two] & PAGE_NUMBER),PAGE_SIZE);
				}	
				// if page in on disk
			}
		}
	}

	// copy heap information
	newas->heap_start = old->heap_start;
	newas->heap_end = old->heap_end;

	*ret = newas;
	return 0;
}

void
as_destroy(struct addrspace *as)
{
	
	// free pages and page table
	vaddr_t* dir_one = (vaddr_t *)as->page_table_addr;

	// traverse the first level of page table
	for(uint32_t  index_one = 0; index_one < 1024; index_one++){
	   // if second level of page table is not zero, try to find pages
		if(dir_one[index_one] != 0){
 		  vaddr_t* dir_two = (vaddr_t *)dir_one[index_one];
		  // traverse the second level of page table
		  for(uint32_t  index_two = 0; index_two < 1024; index_two++){
			  // if there is mapping, then free the page
				if((dir_two[index_two] & PAGE_NUMBER) != 0){
					//vaddr_t t1 = (index_one << 22);
					//t1 &= PAGE_DIR_VA_HL;
					//vaddr_t t2 = index_two << 12;
					//t2 &= PAGE_DIR_VA_M;
					//vaddr_t va = t1 +t2;
				//	page_free(as,va);

					// unmap in page table
					paddr_t paddr = dir_two[index_two] & PAGE_NUMBER;
					dir_two[index_two] = 0;

					//change coremap
					spinlock_acquire(&stealmem_lock);
					int index = paddr / PAGE_SIZE;
					pages[index].page_state = S_FREE;
					pages[index].va = 0;
					pages[index].as = NULL;
					pages[index].time_stamp = 0;
					pages[index].npages = 0;
					spinlock_release(&stealmem_lock);
					
					//shut down tlb
					uint32_t ehi;
					ehi = va & PAGE_NUMBER;
					spl = splhigh();

					int i = tlb_probe(ehi, 0);
					if(i >= 0){
					  tlb_write(TLBHI_INVALID(i),TLBLO_INVALID(),i);
					}
					splx(spl);
				}
		  }
		  // free second level page table itself
		  free_kpages(dir_one[index_one]);
		}
	}
	// free the first level of page table
	free_kpages(as->page_table_addr);
	// free as itself
	kfree(as);
}

void
as_activate(struct addrspace *as)
{
	
	int i, spl;

	(void)as;

	spl = splhigh();

	for (i=0; i<NUM_TLB; i++) {
		tlb_write(TLBHI_INVALID(i), TLBLO_INVALID(), i);
	}

	splx(spl);

}

/*
 * Set up a segment at virtual address VADDR of size MEMSIZE. The
 * segment in memory extends from VADDR up to (but not including)
 * VADDR+MEMSIZE.
 *
 * The READABLE, WRITEABLE, and EXECUTABLE flags are set if read,
 * write, or execute permission should be set on the segment. At the
 * moment, these are ignored. When you write the VM system, you may
 * want to implement them.
 */

int
as_define_region(struct addrspace *as, vaddr_t vaddr, size_t sz,
		 int readable, int writeable, int executable)
{
	size_t npages; 
	sz += vaddr & ~(vaddr_t)PAGE_FRAME;
	vaddr &= PAGE_FRAME;
	sz = (sz + PAGE_SIZE - 1) & PAGE_FRAME;
	npages = sz / PAGE_SIZE;

   // count page number
	for(size_t count = 0; count < npages; count ++){
		vaddr_t* page_entry = page_walk(as, vaddr,0);
		if(page_entry == NULL){
			return ENOMEM;
		}
		uint32_t index_two = ((vaddr >> 12) & PAGE_DIRECTORY);
	   page_entry[index_two] = (~PAGE_NUMBER) & (readable | writeable | executable);
		vaddr += (vaddr_t)PAGE_SIZE;
		if(count == npages -1){
		  KASSERT(((vaddr + (vaddr_t)PAGE_SIZE) & PAGE_NUMBER)  == (vaddr + (vaddr_t)PAGE_SIZE));
        as->heap_start = vaddr;
		  as->heap_end = vaddr;
		}
	}
	return 0;
}

int
as_prepare_load(struct addrspace *as)
{
	 
	(void)as;
	return 0;
}

int
as_complete_load(struct addrspace *as)
{
	
	(void)as;
	return 0;
}

int
as_define_stack(struct addrspace *as, vaddr_t *stackptr)
{
	(void)as;

	// Initial user-level stack pointer 	
	*stackptr = USERSTACK;
	
	return 0;
}


vaddr_t*
page_walk(struct addrspace* as, vaddr_t va, int flag)
{
	//if no entry, alloc a page, if has one, just return
	KASSERT(as->page_table_addr != 0);
   
	vaddr_t* dir_one = (vaddr_t*)as->page_table_addr;
   uint32_t index_one = ((va >> 22) & PAGE_DIRECTORY); 

	// no page dir_two
	if(dir_one[index_one] == 0){
		dir_one[index_one] = alloc_kpages(1);
		if(dir_one[index_one] == 0){
			return NULL;
		}
	}
	vaddr_t* dir_two = (vaddr_t *)(dir_one[index_one]);
	uint32_t index_two = ((va >> 12) & PAGE_DIRECTORY);
	// no mapping
	if(dir_two[index_two] == 0 ||
		  	(((dir_two[index_two] & PAGE_NUMBER) == 0) && ((dir_two[index_two] & PAGE_PERMIT )!= 0))){
         if(flag == 0){
				return (vaddr_t*) dir_one[index_one];
			}
		   paddr_t paddr =  page_allo(as,va);
			if(paddr == 0){
				return NULL;
			}
			return (vaddr_t*) dir_one[index_one];
	}else {
		return (vaddr_t*) dir_one[index_one];
	}
}
